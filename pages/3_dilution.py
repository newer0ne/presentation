import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import json

with open('config.json', 'r', encoding='utf-8') as f:
    data = json.load(f)

molar_mass = data['molar_mass']
pdk = data['pdk']
F = data['F']

st.set_page_config(page_title="Concentrate", page_icon="üß™")

st.markdown("# üß™ –ü–î–ö –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —Ä–∞—Å—Ç–≤–æ—Ä–æ–≤")
st.write(
    """–†–∞—Å—á–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —Ä–∞—Å—Ç–≤–æ—Ä–æ–≤
    –ì–∏–≥–∏–µ–Ω–∏—á–µ—Å–∫–∏–º –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º –ì–ù 2.1.5.1315-03 –≤ —á–∞—Å—Ç–∏ –ü–î–ö""")

materials = pd.read_excel("materials.xlsx")
matlist = materials.iloc[:, 1].tolist()

col1, col2, col3 = st.columns(3)
with col1:
    mat_option = st.selectbox(
        '–ö–∞–∫–æ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª?',
        (matlist))
    st.write('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è:', mat_option)
with col2:
    volume = st.number_input('–û–±—ä—ë–º –≤–∞–Ω–Ω—ã –≤ –ª–∏—Ç—Ä–∞—Ö:', step=1)
    st.write('–û–±—ä—ë–º –≤–∞–Ω–Ω—ã:', volume, ' –ª–∏—Ç—Ä–æ–≤')
with col3:
    amphours = st.number_input('–ê–º–ø–µ—Ä*—á–∞—Å—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:', step=1)
    st.write(amphours, ' –∞–º–ø–µ—Ä*—á–∞—Å–æ–≤')

Q = amphours / F

calc_mat = pd.DataFrame(materials.loc[materials['M–∞—Ä–∫–∞'] == mat_option])
st.write('–•–∏–º–∏—á–µ—Å–∫–∏–π —Å–æ—Å—Ç–∞–≤ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º:')
calc_mat = calc_mat.dropna(axis='columns')
st.dataframe(calc_mat)

# –ü–æ–ª—É—á–∞–µ–º –º–æ–ª–∏
calc_mat.iloc[:, 2:] = calc_mat.iloc[:, 2:] * Q

for column in calc_mat.columns[2:]:
    element_symbol = column
    calc_mat[column] = calc_mat[column] * molar_mass[element_symbol]

# –ü–æ–ª—É—á–∞–µ–º –º–∏–ª–∏–≥—Ä–∞–º–º—ã
calc_mat.iloc[:, 2:] = calc_mat.iloc[:, 2:] * 1000
# –ü–æ–ª—É—á–∞–µ–º –º–∏–ª–∏–≥—Ä–∞–º–º—ã –Ω–∞ –ª–∏—Ç—Ä
calc_mat.iloc[:, 2:] = calc_mat.iloc[:, 2:] / volume
calc_mat = calc_mat.round(3)

st.write('–†–∞—Å—Ç–≤–æ—Ä–µ–Ω–æ –≤–µ—â–µ—Å—Ç–≤ –º–≥/–ª:')

compare_df = pd.DataFrame(columns=['–≠–ª–µ–º–µ–Ω—Ç',
                                   '–ú–∞—Å—Å–∞, –º–≥/–ª',
                                   '–ü–î–ö, –º–≥/–ª',
                                   '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ'])

element_symbol = []
element_mass = []
element_pdk = []
exceed_limit = []

for column in calc_mat.columns[2:]:
    element_symbol.append(column)
    element_mass.append(calc_mat[column].values[0])
    element_pdk.append(pdk[column])
    exceed_limit.append(bool(element_mass[-1] > element_pdk[-1]))

compare_df = pd.DataFrame(list(zip(element_symbol,
                                   element_mass,
                                   element_pdk,
                                   exceed_limit)),
                          columns=['–≠–ª–µ–º–µ–Ω—Ç',
                                   '–ú–∞—Å—Å–∞, –º–≥/–ª',
                                   '–ü–î–ö, –º–≥/–ª',
                                   '–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ'])

compare_df['–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑'] = compare_df['–ú–∞—Å—Å–∞, –º–≥/–ª'] / \
    compare_df['–ü–î–ö, –º–≥/–ª']
compare_df = compare_df.sort_values(by=['–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑'], ascending=False)
st.dataframe(compare_df, use_container_width=True)


st.write('''–ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ç–≤–æ—Ä–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         –ø–æ –º–∞—Å—Å–µ –∏ –ü–î–ö –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –æ—Ç 0,1:''')

chart_data = compare_df.drop(columns=['–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ'])
chart_data = chart_data.loc[chart_data['–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–∑'] > 0.1]

x = np.arange(len(chart_data['–≠–ª–µ–º–µ–Ω—Ç']))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0

fig, ax = plt.subplots()

for attribute in chart_data[['–ú–∞—Å—Å–∞, –º–≥/–ª', '–ü–î–ö, –º–≥/–ª']]:
    offset = width * multiplier
    rects = ax.bar(x + offset, chart_data[attribute], width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1

# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('–ú–∞—Å—Å–∞, –º–≥/–ª')
ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –º–∞—Å—Å–µ –∏ –ü–î–ö')
ax.set_xticks(x, chart_data['–≠–ª–µ–º–µ–Ω—Ç'])
ax.legend()


st.pyplot(fig)
